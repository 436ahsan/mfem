sudo: false

language: cpp

compiler:
   - gcc
   - clang

os:
   - linux
   - osx

env:
   global:
      - TMPDIR=/tmp
# Travis VM environment provides 2 processor cores.
# Note: NPROCS=2 for linux, see below.
      - NPROCS=4
   matrix:
      - DEBUG=YES
        MPI=YES
        CODECOV=NO
        MFEM_TEST_TARGET=check
      - DEBUG=NO
        MPI=YES
        CODECOV=YES
        MFEM_TEST_TARGET=test
      - DEBUG=YES
        MPI=NO
        CODECOV=NO
        MFEM_TEST_TARGET=check
      - DEBUG=NO
        MPI=NO
        CODECOV=NO
        MFEM_TEST_TARGET=test

addons:
   apt:
      sources:
         - ubuntu-toolchain-r-test
      packages:
         - g++-4.9
# MPICH
         - mpich
         - libmpich-dev
# OpenMPI
#         - openmpi-bin
#         - libopenmpi-dev

# Test with GCC on Linux an Clang on Mac
matrix:
   exclude:
      - compiler: clang
        os: linux
      - compiler: gcc
        os: osx

before_install:
    # No addon for brew yet, have to install OSX packages this way.
   - if [ $TRAVIS_OS_NAME == "osx" ]; then
        rvm get stable;
        if [ $MPI == "YES" ]; then
           travis_wait brew install open-mpi;
        fi
      fi

   # Install tool to upload code coverage reports to coveralls.io
   - if [ "$CODECOV" == "YES" ]; then
        export PYTHONUSERBASE=$HOME/local;
        pip install --user cpp-coveralls;
        pip install --user pyyaml;
        PATH=$HOME/local/bin:$PATH;
     fi

   # Update environment to find g++ 4.9 installation first.
   - if [ $TRAVIS_OS_NAME == "linux" ]; then
         mkdir -p latest-gcc-symlinks;
         ln -s /usr/bin/g++-4.9 latest-gcc-symlinks/g++;
         ln -s /usr/bin/gcc-4.9 latest-gcc-symlinks/gcc;
         ln -s /usr/bin/gcov-4.9 latest-gcc-symlinks/gcov;
         export PATH=$PWD/latest-gcc-symlinks:$PATH;
     fi

install:
   # Set MPI compilers, print compiler version
   - if [ $MPI == "YES" ]; then
        if [ "$TRAVIS_OS_NAME" == "linux" ]; then
           export MPICH_CC="$CC";
           export MPICH_CXX="$CXX";
        else
           export OMPI_CC="$CC";
           export OMPI_CXX="$CXX";
           mpic++ --showme:version;
        fi;
        mpic++ -v;
     else
        $CXX -v;
     fi

   # Back out of the mfem directory to install the libraries
   - cd ..

   # hypre
   - if [ $MPI == "YES" ]; then
        if [ ! -d hypre-2.10.0b ]; then
           wget https://computation.llnl.gov/project/linear_solvers/download/hypre-2.10.0b.tar.gz --no-check-certificate;
           tar xvzf hypre-2.10.0b.tar.gz;
           cd hypre-2.10.0b/src;
           ./configure --disable-fortran --without-fei CC=mpicc CXX=mpic++;
           make -j3;
           cd ../..;
        else
            echo "Reusing cached hypre-2.10.0b/";
        fi;
     else
        echo "Serial build, not using hypre";
     fi

   # METIS
   - if [ $MPI == "YES" ]; then
        if [ ! -d metis-4.0 ]; then
           wget http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz;
           tar xvzf metis-4.0.3.tar.gz;
           cd metis-4.0.3;
           make -j3 -C Lib CC="$CC" OPTFLAGS="-O2";
           cd ..;
           mv metis-4.0.3 metis-4.0;
        else
           echo "Reusing cached metis-4.0/";
        fi;
     fi

script:
   # Compiler
   - if [ $MPI == "YES" ]; then
        export MYCXX=mpic++;
        if [ "$TRAVIS_OS_NAME" == "linux" ]; then
           NPROCS=2;
        fi;
     else
        export MYCXX="$CXX";
     fi

   # Print the compiler version
   - $MYCXX -v

   # Set some variables
   - cd $TRAVIS_BUILD_DIR;
     CPPFLAGS="";
     SKIP_TEST_DIRS="";
     if [ "$CODECOV" == "YES" ]; then
        CPPFLAGS="--coverage -g";
     fi

   # Configure the library
   - make config MFEM_USE_MPI=$MPI MFEM_DEBUG=$DEBUG MFEM_CXX="$MYCXX"
        MFEM_MPI_NP=$NPROCS CPPFLAGS="$CPPFLAGS"
   # Show the configuration
   - make info
   # Build the library
   - make -j3
   # Build the examples and the miniapps
   - make -j3 all
   # Run tests
   - make $MFEM_TEST_TARGET SKIP_TEST_DIRS="$SKIP_TEST_DIRS"

after_success:
   - if [ "$CODECOV" == "YES" ]; then
        coveralls --include fem --include general --include linalg --include
           mesh --exclude /usr --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR;
     fi
