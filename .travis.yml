language: cpp

compiler:
   - gcc
#   - clang

os:
   - linux
#   - osx

env:
   global:
      - TMPDIR=/tmp
   matrix:
#      - DEBUG=YES
#        MPI=YES
#        CODECOV=NO
#        MFEM_TEST_TARGET=check
#      - DEBUG=NO
#        MPI=YES
#        CODECOV=NO
#        MFEM_TEST_TARGET=test
      - DEBUG=YES
        MPI=NO
        CODECOV=YES
        MFEM_TEST_TARGET=test
#      - DEBUG=NO
#        MPI=NO
#        MFEM_TEST_TARGET=test

# Test with GCC on Linux an Clang on Mac
matrix:
   exclude:
      - compiler: clang
        os: linux
      - compiler: gcc
        os: osx

before_install:
   - if [ $TRAVIS_OS_NAME == "linux" -a "$CXX" == "g++" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
   - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo apt-get update; fi || true

install:
   # g++-4.9
   - if [ $TRAVIS_OS_NAME == "linux" -a "$CXX" == "g++" ]; then sudo apt-get install -qq g++-4.9; fi
   - if [ $TRAVIS_OS_NAME == "linux" -a "$CXX" == "g++" ]; then export CXX="g++-4.9"; fi

   # Back out of the mfem directory to install the libraries
   - cd ..

   # Code coverage tools ( lcov, rubygems, coveralls )
#   - if [ "$CODECOV" == "YES" ]; then
#        pip install cpp-coveralls;
#     fi
   - pip install requests==2.5.3
   - pip install cpp-coveralls
 
   # OpenMPI
   - if [ $TRAVIS_OS_NAME == "linux" ]; then
        sudo apt-get install openmpi-bin openmpi-common openssh-client openssh-server libopenmpi1.3 libopenmpi-dbg libopenmpi-dev;
     else
        travis_wait brew install open-mpi;
     fi

   # hypre
   - if [ $MPI == "YES" ]; then
        if [ ! -d hypre-2.10.0b ]; then
            wget https://computation.llnl.gov/project/linear_solvers/download/hypre-2.10.0b.tar.gz --no-check-certificate;
            tar xvzf hypre-2.10.0b.tar.gz;
            cd hypre-2.10.0b/src;
            ./configure --disable-fortran --without-fei CC=mpicc CXX=mpic++;
            make -j 4;
            cd ../..;
        else
            echo "Reusing cached hypre-2.10.0b/";
        fi;
     else
        echo "Serial build, not using hypre";
     fi

   # METIS
   - if [ ! -d metis-4.0 ]; then
        wget http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz;
        tar xvzf metis-4.0.3.tar.gz;
        cd metis-4.0.3;
        make -j 4;
        cd ..;
        mv metis-4.0.3 metis-4.0;
     else
        echo "Reusing cached metis-4.0/";
     fi

# # Delete an expired cache here: https://travis-ci.org/mfem/mfem/caches
# cache:
#   directories:
#     - $TRAVIS_BUILD_DIR/../hypre-2.10.0b
#     - $TRAVIS_BUILD_DIR/../metis-4.0

script:
   # Compiler
   - if [ $MPI == "YES" ]; then
        export MYCXX=mpic++;
        export OMPI_CXX="$CXX";
        $MYCXX --showme:version;
     else
        export MYCXX="$CXX";
     fi
   # Print the compiler version
   - $MYCXX -v
        
   # Build and check/test MFEM, its examples and miniapps
   - cd $TRAVIS_BUILD_DIR &&
     make config MFEM_USE_MPI=$MPI MFEM_DEBUG=$DEBUG MFEM_CXX="$MYCXX" MFEM_USE_CODECOV=$CODECOV &&
     make info &&
     make all -j 4 &&
     make $MFEM_TEST_TARGET

after_success:
#   - if [ $TRAVIS_OS_NAME == "linux" -a "$CXX" == "g++" -a "CODECOV" == "YES" ]; then
#       coveralls --gcov /usr/bin/gcov-4.8 --include fem --include general --include linalg --include mesh --miniapps --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR --build-root $TRAVIS_BUILD_DIR;
#     fi;
   - coveralls --verbose --gcov /usr/bin/gcov-4.9 --include fem --include general --include linalg --include mesh --miniapps --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR --build-root $TRAVIS_BUILD_DIR;
